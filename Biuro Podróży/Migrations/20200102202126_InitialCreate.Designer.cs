// <auto-generated />
using System;
using Biuro_Podróży.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BiuroPodróży.Migrations
{
    [DbContext(typeof(BiuroContext))]
    [Migration("20200102202126_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Biuro_Podróży.Models.Jedzenie", b =>
                {
                    b.Property<int>("Id_jedzenia")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cena");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Opis")
                        .IsRequired();

                    b.HasKey("Id_jedzenia");

                    b.ToTable("Jedzenie");
                });

            modelBuilder.Entity("Biuro_Podróży.Models.User", b =>
                {
                    b.Property<int>("Id_usera")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Imie");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Miejscowosc");

                    b.Property<string>("Nazwisko");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Telefon");

                    b.Property<int>("Uprawnienia");

                    b.HasKey("Id_usera");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Biuro_Podróży.Models.Wycieczka", b =>
                {
                    b.Property<int>("Id_wycieczki")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cena");

                    b.Property<DateTime>("Data_end");

                    b.Property<DateTime>("Data_start");

                    b.Property<int>("Id_jedzenia");

                    b.Property<int>("Id_zakwaterowania");

                    b.Property<string>("Miejsce")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Opis")
                        .IsRequired();

                    b.HasKey("Id_wycieczki");

                    b.HasIndex("Id_jedzenia");

                    b.HasIndex("Id_zakwaterowania");

                    b.ToTable("Wycieczka");
                });

            modelBuilder.Entity("Biuro_Podróży.Models.Wycieczka_Klient", b =>
                {
                    b.Property<int>("Id_zamowienia")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bilety");

                    b.Property<int>("Id_usera");

                    b.Property<int>("Id_wycieczki");

                    b.HasKey("Id_zamowienia");

                    b.HasIndex("Id_usera");

                    b.HasIndex("Id_wycieczki");

                    b.ToTable("Wycieczka_Klient");
                });

            modelBuilder.Entity("Biuro_Podróży.Models.Zakwaterowanie", b =>
                {
                    b.Property<int>("Id_zakwaterowania")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cena");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Opis")
                        .IsRequired();

                    b.HasKey("Id_zakwaterowania");

                    b.ToTable("Zakwaterowanie");
                });

            modelBuilder.Entity("Biuro_Podróży.Models.Wycieczka", b =>
                {
                    b.HasOne("Biuro_Podróży.Models.Jedzenie", "Jedzenie")
                        .WithMany("Wycieczka")
                        .HasForeignKey("Id_jedzenia")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biuro_Podróży.Models.Zakwaterowanie", "Zakwaterowanie")
                        .WithMany("Wycieczka")
                        .HasForeignKey("Id_zakwaterowania")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biuro_Podróży.Models.Wycieczka_Klient", b =>
                {
                    b.HasOne("Biuro_Podróży.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Id_usera")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biuro_Podróży.Models.Wycieczka", "Wycieczka")
                        .WithMany()
                        .HasForeignKey("Id_wycieczki")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
